/**
 * 
 */
package CS3450.course_project.installation;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 * @author Justin Bradshaw
 *
 */
public class Installation implements ActionListener{
	/**
	 * frame where the system will be produced
	 */
	private JFrame frame = new JFrame("Grocery Store Checkout System: Edit My Info");
	/**
	 * pane to be contained in the frame
	 */
	private Container pane;
	/**
	 * stores the header for the pane
	 */
	private JLabel storeHeader = new JLabel("Installation", JLabel.CENTER);
	/**
	 * stores the footer for the pane
	 */
	private JLabel storeFooter = new JLabel("Copyright Info", JLabel.CENTER);
	/**
	 * primary color for the GUI
	 */
	private Color baseColor = new Color(180,242,110);
	/**
	 * secondary color for the GUI
	 */
	private Color secondaryColor = Color.GRAY.darker();
	/**
	 * base font for the header
	 */
	private Font baseFont = new Font("Verdana", Font.BOLD,16);
	/**
	 * return to main screen, cancel changes.
	 */
	private JButton cancel = new JButton("Cancel");
	/**
	 * return to inventory screen, finalize changes.
	 */
	private JButton installBtn = new JButton("Install");
	/**
	 * input fields
	 */
	private JTextField databaseLocField = new JTextField();
	/**
	 * host name field
	 */
	private JTextField hostNameField = new JTextField();
	/**
	 * directory field
	 */
	private JTextField directoryField = new JTextField();
	/**
	 * password field
	 */
	private JPasswordField passwordField = new JPasswordField();
	/**
	 * labels for info
	 */
	private JLabel  databaseLabel = new JLabel ("Database Location");
	/**
	 * label for host name
	 */
	private JLabel hostNameLabel = new JLabel("Host Name");
	/**
	 * label for password
	 */
	private JLabel passwordLabel = new JLabel("Password");
	/**
	 * label for directory
	 */
	private JLabel directoryLabel = new JLabel("Installation Directory");
	/**
	 * middle panel
	 */
	private JPanel middlePanel = new JPanel(new GridLayout(5,2));

	/**
	 * default constructor
	 */
	public Installation(){	
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(900, 400);
		pane = frame.getContentPane();
		pane.setLayout(new BorderLayout());

		//make the header look pretty
		storeHeader.setBackground(secondaryColor);
		storeHeader.setForeground(baseColor);
		storeHeader.setFont(baseFont);
		storeHeader.setOpaque(true);
		storeHeader.setPreferredSize(new Dimension(frame.getWidth(),50));
		
		middlePanel.add(databaseLabel);
		middlePanel.add(databaseLocField);
		middlePanel.add(hostNameLabel);
		middlePanel.add(hostNameField);
		middlePanel.add(passwordLabel);
		middlePanel.add(passwordField);
		middlePanel.add(directoryLabel);
		middlePanel.add(directoryField);
		installBtn.addActionListener(this);
		middlePanel.add(installBtn);
		cancel.addActionListener(this);
		middlePanel.add(cancel);
    	
		//make the footer look pretty
		storeFooter.setBackground(secondaryColor);
		storeFooter.setForeground(baseColor);
		storeFooter.setFont(new Font("Verdana",Font.PLAIN,10));
		storeFooter.setOpaque(true);
		storeFooter.setPreferredSize(new Dimension(frame.getWidth(),50));
		
		//add components to container
		pane.add(storeHeader, BorderLayout.NORTH);
		pane.add(middlePanel, BorderLayout.CENTER);
		pane.add(storeFooter, BorderLayout.SOUTH);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
	}
	
	/**
	 * @param path
	 * 
	 * create the configuration file
	 */
	private void writeConfigFile(String path){
		try (Writer writer = new BufferedWriter(new OutputStreamWriter(
	          new FileOutputStream(path), "utf-8"))) {
				writer.write(databaseLocField.getText() + "\n" + hostNameField.getText() + "\n" + new String(passwordField.getPassword()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * @param args
	 * 
	 * main method where the installation program will run
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable(){
			@Override
			public void run() {
				new Installation();
			}});
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == cancel){
			System.exit(0);
		}
		else if (e.getSource() == installBtn){
			System.out.println("Install Pressed!");
			writeConfigFile("config.txt");
			JOptionPane.showConfirmDialog(null,"The installation process completed successfully.");
			System.exit(0);
		}
	}
	
}
