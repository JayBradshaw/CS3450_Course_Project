/**
 * 
 */
package CS3450.course_project.installation;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 * @author Justin Bradshaw
 *
 */
public class Installation implements ActionListener{
	/**
	 * frame where the system will be produced
	 */
	private JFrame frame = new JFrame("Grocery Store Checkout System: Installation");
	/**
	 * pane to be contained in the frame
	 */
	private Container pane;
	/**
	 * stores the header for the pane
	 */
	private JLabel storeHeader = new JLabel("Installation", JLabel.CENTER);
	/**
	 * stores the footer for the pane
	 */
	private JLabel storeFooter = new JLabel("Copyright Info", JLabel.CENTER);
	/**
	 * primary color for the GUI
	 */
	private Color baseColor = new Color(180,242,110);
	/**
	 * secondary color for the GUI
	 */
	private Color secondaryColor = Color.GRAY.darker();
	/**
	 * base font for the header
	 */
	private Font baseFont = new Font("Verdana", Font.BOLD,16);
	/**
	 * return to main screen, cancel changes.
	 */
	private JButton cancel = new JButton("Cancel");
	/**
	 * return to inventory screen, finalize changes.
	 */
	private JButton installBtn = new JButton("Install");
	/**
	 * button to select the installation directory
	 */
	private JButton selectDir = new JButton("Select Directory");
	/**
	 * input fields
	 */
	private JTextField databaseLocField = new JTextField();
	/**
	 * host name field
	 */
	private JTextField hostNameField = new JTextField();
	/**
	 * password field
	 */
	private JPasswordField passwordField = new JPasswordField();
	/**
	 * labels for info
	 */
	private JLabel  databaseLabel = new JLabel ("Database Location");
	/**
	 * label for host name
	 */
	private JLabel hostNameLabel = new JLabel("Host Name");
	/**
	 * label for password
	 */
	private JLabel passwordLabel = new JLabel("Password");
	/**
	 * label for directory
	 */
	private JLabel directoryLabel = new JLabel("Installation Directory");
	/**
	 * middle panel
	 */
	private JPanel middlePanel = new JPanel(new GridLayout(5,2));
	/**
	 * String that holds the installation directory
	 */
	private String installDirectory = new String();
	/**
	 * for choosing the installation directory
	 */
	private JFileChooser dirChooser;

	/**
	 * default constructor
	 */
	public Installation(){	
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(900, 400);
		pane = frame.getContentPane();
		pane.setLayout(new BorderLayout());

		//make the header look pretty
		storeHeader.setBackground(secondaryColor);
		storeHeader.setForeground(baseColor);
		storeHeader.setFont(baseFont);
		storeHeader.setOpaque(true);
		storeHeader.setPreferredSize(new Dimension(frame.getWidth(),50));
		
		middlePanel.add(databaseLabel);
		middlePanel.add(databaseLocField);
		middlePanel.add(hostNameLabel);
		middlePanel.add(hostNameField);
		middlePanel.add(passwordLabel);
		middlePanel.add(passwordField);
		middlePanel.add(directoryLabel);
		selectDir.addActionListener(this);
		middlePanel.add(selectDir);
		installBtn.addActionListener(this);
		middlePanel.add(installBtn);
		cancel.addActionListener(this);
		middlePanel.add(cancel);
    	
		//make the footer look pretty
		storeFooter.setBackground(secondaryColor);
		storeFooter.setForeground(baseColor);
		storeFooter.setFont(new Font("Verdana",Font.PLAIN,10));
		storeFooter.setOpaque(true);
		storeFooter.setPreferredSize(new Dimension(frame.getWidth(),50));
		
		//add components to container
		pane.add(storeHeader, BorderLayout.NORTH);
		pane.add(middlePanel, BorderLayout.CENTER);
		pane.add(storeFooter, BorderLayout.SOUTH);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
	}
	
	/**
	 * @param path
	 * 
	 * create the configuration file
	 */
	private void writeConfigFile(String path){
		try (Writer writer = new BufferedWriter(new OutputStreamWriter(
	          new FileOutputStream(path), "utf-8"))) {
				writer.write(databaseLocField.getText() + "\n" + hostNameField.getText() + "\n" + new String(passwordField.getPassword()));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @param path
	 * 
	 * set the installation directory
	 */
	private void setInstallationDir(String path){
		installDirectory = path;
	}
	
	/**
	 * @return
	 * 
	 * get the installation directory
	 */
	private String getInstallationDir(){
		return installDirectory;
	}
	
	private static void copyFile(File source, File destination) throws IOException {
		Files.copy(source.toPath(), destination.toPath());
	}
	
	 /**
	 * @param sourceLocation
	 * @param targetLocation
	 * @throws IOException
	 * 
	 * copy an entire directory
	 * taken from http://stackoverflow.com/questions/1146153/copying-files-from-one-directory-to-another-in-java
	 */
	public void copyDirectory(File sourceLocation , File targetLocation)
			    throws IOException {

			        if (sourceLocation.isDirectory()) {
			            if (!targetLocation.exists()) {
			                targetLocation.mkdir();
			            }

			            String[] children = sourceLocation.list();
			            for (int i=0; i<children.length; i++) {
			                copyDirectory(new File(sourceLocation, children[i]),
			                        new File(targetLocation, children[i]));
			            }
			        } else {

			            InputStream in = new FileInputStream(sourceLocation);
			            OutputStream out = new FileOutputStream(targetLocation);

			            // Copy the bits from instream to outstream
			            byte[] buf = new byte[1024];
			            int len;
			            while ((len = in.read(buf)) > 0) {
			                out.write(buf, 0, len);
			            }
			            in.close();
			            out.close();
			        }
			    }
	

	/**
	 * @param args
	 * 
	 * main method where the installation program will run
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable(){
			@Override
			public void run() {
				new Installation();
			}});
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == cancel){
			System.exit(0);
		}
		else if (e.getSource() == installBtn){
			System.out.println("Install Pressed!");
			if (databaseLocField.getText().isEmpty() || hostNameField.getText().isEmpty()){
				JOptionPane.showMessageDialog(null,"Error! Empty field not allowed!","Error",JOptionPane.ERROR_MESSAGE);
				return;
			}
			if ( installDirectory.isEmpty()){
				JOptionPane.showMessageDialog(null, "Error! No directory selected!");
				return;
			}
			File configLoc = new File(getInstallationDir() + "\\config.txt");
			boolean overwrite = false;
			if (configLoc.exists()){
				int x = JOptionPane.showConfirmDialog(null,"Installation at specified path already exists.\nOverwrite?","Overwrite Installation?",JOptionPane.YES_NO_OPTION);
				if (x == JOptionPane.YES_OPTION){
					overwrite = true;
				}
				else { //exit and don't install
					return;
				}
			}
			if (overwrite){ //rewrite config file if overwrite. None of the other files need to be changed
				writeConfigFile(getInstallationDir() + "\\config.txt"); //write the config file
				JOptionPane.showMessageDialog(null, "The overwrite process completed successfully.", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
				return;
			}
			else { //just write the configuration file
				writeConfigFile(getInstallationDir() + "\\config.txt"); //write the config file
			}
			//copy the data folder
			File dataFolder = new File(Paths.get(".").toAbsolutePath().normalize().toString()+ "\\data");
			System.out.println(dataFolder.getAbsolutePath());
			File dataCopyTo = new File(getInstallationDir() + "\\data");
			//copy data folder
			try {
				copyDirectory(dataFolder, dataCopyTo);
			} catch (IOException e1) {
				JOptionPane.showMessageDialog(null, "Installation Unsuccessful!");
				e1.printStackTrace();
				return;
			}
			//copy jar
			File jarFile = new File("groceryStore.jar");
			File copyJar = new File(getInstallationDir() + "\\groceryStore.jar");
			try {
				copyFile(jarFile,copyJar);
			} catch (IOException e1) {
				JOptionPane.showMessageDialog(null, "Installation Unsuccessful!");
				e1.printStackTrace();
				return;
			}
			//copy the external library folder
			File extLib = new File(Paths.get(".").toAbsolutePath().normalize().toString()+ "\\groceryStore_lib");
			System.out.println(dataFolder.getAbsolutePath());
			File copyLib = new File(getInstallationDir() + "\\groceryStore_lib");
			try {
				copyDirectory(extLib,copyLib);
			} catch (IOException e1) {
				JOptionPane.showMessageDialog(null, "Installation Unsuccessful!");
				e1.printStackTrace();
				return;
			}
			//done!!!!!!!!!!
			JOptionPane.showMessageDialog(null, "The installation process completed successfully.", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
			int x = JOptionPane.showConfirmDialog(null,"Would you like to execute the program?","Execute?",JOptionPane.YES_NO_OPTION);
			if (x == JOptionPane.YES_OPTION){
				try {
					System.out.println("Execute program");
					String execution = getInstallationDir() + "\\groceryStore.jar";
					System.out.println(" java -jar " + execution);
					Runtime.getRuntime().exec(" java -jar "  + execution);
				} catch (IOException e1) {
					JOptionPane.showMessageDialog(null, "Unable to execute!");
					e1.printStackTrace();
				}
			}
			//System.exit(0);
		}
		else if (e.getSource() == selectDir){ //set the installation directory
			dirChooser = new JFileChooser();
	        //dirChooser.setCurrentDirectory(new java.io.File("."));
	        dirChooser.setDialogTitle("SELECT DIRECTORY");
	        dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			//JOptionPane.showMessageDialog(null, "This has not yet been implemented.");
	        dirChooser.setAcceptAllFileFilterUsed(false);
	        //
	        if (dirChooser.showOpenDialog(pane) == JFileChooser.APPROVE_OPTION) {
	            System.out.println("getCurrentDirectory(): "
	                    +  dirChooser.getCurrentDirectory());
	            System.out.println("getSelectedFile() : "
	                    +  dirChooser.getSelectedFile());
	        }
	        else {
	            System.out.println("No Selection ");
	            return;
	        }
			setInstallationDir(dirChooser.getSelectedFile().getAbsolutePath());
			System.out.println(installDirectory);
		}
	}
	
}
